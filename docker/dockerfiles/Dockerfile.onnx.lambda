FROM public.ecr.aws/lambda/python:3.10

WORKDIR /app

ARG DEBIAN_FRONTEND=noninteractive
ARG TARGETPLATFORM

RUN yum update -y && yum install -y \
    libsm6 \
    libxext6  \
    python3-pip \
    git \
    zlib-devel \
    libjpeg-devel \
    gcc \
    mesa-libGL \
    pango \
    wget \
    && yum clean all

COPY requirements/requirements.clip.txt \
    requirements/requirements.cpu.txt \
    requirements/requirements.http.txt \
    requirements/requirements.hosted.txt \
    requirements/requirements.doctr.txt \
    requirements/requirements.groundingdino.txt \
    requirements/_requirements.txt \
    requirements/requirements.sdk.http.txt \
    requirements/requirements.yolo_world.txt \
    requirements/requirements.vino.txt \
    ./


RUN if [ "${TARGETPLATFORM}" == "linux/amd64" ]; then mv requirements.vino.txt requirements.cpu.txt; fi

RUN /var/lang/bin/python3.10 -m pip install --upgrade pip && rm -rf ~/.cache/pip
RUN pip3 install \
    --extra-index-url https://download.pytorch.org/whl/cpu \
    certifi==2022.12.07 \
    -r _requirements.txt \
    -r requirements.clip.txt \
    -r requirements.cpu.txt \
    -r requirements.http.txt \
    -r requirements.hosted.txt \
    -r requirements.groundingdino.txt \
    -r requirements.doctr.txt \
    -r requirements.sdk.http.txt \
    -r requirements.yolo_world.txt \
    mangum \
    "setuptools<=75.5.0" \
    --upgrade \
    --target "${LAMBDA_TASK_ROOT}" \
    && rm -rf ~/.cache/pip

COPY inference ${LAMBDA_TASK_ROOT}/inference
COPY inference_sdk ${LAMBDA_TASK_ROOT}/inference_sdk
COPY docker/config/lambda.py ${LAMBDA_TASK_ROOT}/lambda.py

ENV LAMBDA=True
ENV CORE_MODEL_SAM_ENABLED=False
ENV CORE_MODEL_SAM2_ENABLED=False
ENV ALLOW_NUMPY_INPUT=False
ENV INFERENCE_SERVER_ID=HostedInferenceLambda
ENV DISABLE_VERSION_CHECK=true
ENV DOCTR_MULTIPROCESSING_DISABLE=TRUE
ENV REDIS_SSL=true
ENV WORKFLOWS_STEP_EXECUTION_MODE=remote
ENV WORKFLOWS_REMOTE_API_TARGET=hosted
ENV API_LOGGING_ENABLED=True
ENV MODEL_VALIDATION_DISABLED=True
ENV ALLOW_NON_HTTPS_URL_INPUT=False
ENV ALLOW_URL_INPUT_WITHOUT_FQDN=False
ENV ALLOW_CUSTOM_PYTHON_EXECUTION_IN_WORKFLOWS=False
ENV CORE_MODEL_TROCR_ENABLED=false
ENV USE_FILE_CACHE_FOR_WORKFLOWS_DEFINITIONS=False
ENV ALLOW_WORKFLOW_BLOCKS_ACCESSING_LOCAL_STORAGE=False
ENV ALLOW_WORKFLOW_BLOCKS_ACCESSING_ENVIRONMENTAL_VARIABLES=False

WORKDIR ${LAMBDA_TASK_ROOT}
RUN rm -rf /build

CMD [ "lambda.handler" ]