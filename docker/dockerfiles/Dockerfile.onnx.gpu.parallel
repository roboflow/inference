# Stage 1: Compile image - install build dependencies and create virtualenv
FROM nvcr.io/nvidia/cuda:12.4.1-cudnn-devel-ubuntu22.04 AS compile-image

WORKDIR /app

# Install build dependencies
RUN rm -rf /var/lib/apt/lists/* && apt-get clean && apt-get update -y && DEBIAN_FRONTEND=noninteractive apt-get install -y \
    python3-pip \
    python3-venv \
    git \
    rustc \
    cargo \
    libxext6 \
    libopencv-dev \
    && rm -rf /var/lib/apt/lists/*

# Create and use virtualenv
RUN python3 -m venv /opt/venv
ENV PATH="/opt/venv/bin:$PATH"

# Copy requirements files
COPY requirements/requirements.sam.txt \
    requirements/requirements.clip.txt \
    requirements/requirements.http.txt \
    requirements/requirements.gpu.txt \
    requirements/requirements.waf.txt \
    requirements/requirements.gaze.txt \
    requirements/requirements.parallel.txt \
    requirements/_requirements.txt \
    ./

# Install Python packages into virtualenv
RUN pip3 install --upgrade pip  && pip3 install \
    -r _requirements.txt \
    -r requirements.sam.txt \
    -r requirements.clip.txt \
    -r requirements.http.txt \
    -r requirements.gpu.txt \
    -r requirements.waf.txt \
    -r requirements.gaze.txt \
    -r requirements.parallel.txt \
    "setuptools<=75.5.0" \
    --upgrade \
    && rm -rf ~/.cache/pip

# Build application wheels
WORKDIR /build
COPY . .
RUN /bin/make create_wheels_for_gpu_notebook
RUN pip3 install dist/inference_cli*.whl dist/inference_core*.whl dist/inference_gpu*.whl dist/inference_sdk*.whl "setuptools<=75.5.0"

# Stage 2: Runtime image - minimal dependencies with virtualenv
FROM nvcr.io/nvidia/cuda:12.4.1-cudnn-runtime-ubuntu22.04 AS runtime-image

WORKDIR /app

# Install only runtime dependencies
RUN rm -rf /var/lib/apt/lists/* && apt-get clean && apt-get update -y && DEBIAN_FRONTEND=noninteractive apt-get install -y \
    uvicorn \
    lsb-release \
    curl \
    gpg \
    libxext6 \
    libopencv-dev \
    && rm -rf /var/lib/apt/lists/*

# Install Redis in runtime stage
RUN curl -fsSL https://packages.redis.io/gpg | gpg --dearmor -o /usr/share/keyrings/redis-archive-keyring.gpg
RUN echo "deb [signed-by=/usr/share/keyrings/redis-archive-keyring.gpg] https://packages.redis.io/deb $(lsb_release -cs) main" | tee /etc/apt/sources.list.d/redis.list
RUN apt-get update && apt-get install -y redis && rm -rf /var/lib/apt/lists/*
RUN echo net.core.somaxconn=1024 > /etc/sysctl.conf

# Copy and use virtualenv from compile stage
COPY --from=compile-image /opt/venv /opt/venv
ENV PATH="/opt/venv/bin:$PATH"

# Copy notebooks
WORKDIR /notebooks
COPY examples/notebooks .

# Copy application code
WORKDIR /app/
COPY inference inference
COPY inference/enterprise/parallel/parallel_http_config.py parallel_http.py
COPY inference/enterprise/parallel/entrypoint.py entrypoint.py

# Environment variables
ENV PYTHONPATH=/app/
ENV PROJECT=roboflow-platform
ENV CORE_MODELS_ENABLED=false
ENV WORKFLOWS_STEP_EXECUTION_MODE=local
ENV WORKFLOWS_MAX_CONCURRENT_STEPS=1
ENV REDIS_HOST=localhost
ENV API_LOGGING_ENABLED=True
ENV CORE_MODEL_SAM2_ENABLED=True
ENV CORE_MODEL_TROCR_ENABLED=false
ENV ENABLE_PROMETHEUS=True

ENTRYPOINT python3 entrypoint.py
