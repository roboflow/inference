name: Build macOS Bundle

on:
  workflow_dispatch:

jobs:
  build_osx:
    runs-on: macos-latest
    env:
      KEYCHAIN_NAME: "build-keychain.keychain"
      CODESIGN_IDENTITY_STRING: "Developer ID Application: Roboflow, LLC (7SBQ39NG7G)"
      NOTARY_PROFILE_NAME: "roboflow-notary"
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        # No 'path' means checkout to the root

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install Homebrew
        run: |
          /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
          # Add Homebrew to PATH for this step and subsequent ones in the job
          echo "/opt/homebrew/bin" >> $GITHUB_PATH
        shell: bash

      - name: Install Pyenv build dependencies (and OpenSSL for system if needed by Pyenv)
        run: |
          brew install openssl readline sqlite3 xz zlib tcl-tk
        shell: bash

      - name: Install pyenv and Python 3.12.3
        run: |
          brew install pyenv
          export PYENV_ROOT="$HOME/.pyenv"
          export PATH="$PYENV_ROOT/bin:$PATH"
          eval "$(pyenv init --path)"
          eval "$(pyenv init -)"
          pyenv install 3.12.3
          pyenv global 3.12.3
          # Add pyenv shims to GITHUB_PATH for subsequent steps
          echo "$(pyenv root)/shims" >> $GITHUB_PATH
          echo "Installed Python version:"
          python --version
          echo "Pip version:"
          pip --version
          echo "Path to Python:"
          which python
          echo "Path to Pip:"
          which pip
        shell: bash

      - name: Import Apple Certificate and Key
        env:
          APPLE_CERTIFICATE_P12_BASE64: ${{ secrets.APPLE_CERTIFICATE_P12_BASE64 }}
          APPLE_CERTIFICATE_PASSWORD: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}
          KEYCHAIN_TEMP_PASSWORD: "temp_keychain_password" # A temporary password for the keychain itself
        run: |
          echo "Creating temporary keychain: $KEYCHAIN_NAME"
          security create-keychain -p "$KEYCHAIN_TEMP_PASSWORD" "$KEYCHAIN_NAME"
          # Make the new keychain default, keeping login.keychain in search path
          security list-keychains -d user -s "$KEYCHAIN_NAME" login.keychain
          security default-keychain -s "$KEYCHAIN_NAME"
          security unlock-keychain -p "$KEYCHAIN_TEMP_PASSWORD" "$KEYCHAIN_NAME"
          security set-keychain-settings -t 3600 -u "$KEYCHAIN_NAME" # Keep unlocked for 1 hour

          echo "Decoding and importing certificate..."
          echo "$APPLE_CERTIFICATE_P12_BASE64" | base64 --decode > certificate.p12
          # Import certificate into the keychain, allowing codesign to use it without prompts
          security import certificate.p12 -k "$KEYCHAIN_NAME" -P "" -T /usr/bin/codesign -T /usr/bin/productsign -T /usr/bin/security
          rm -f certificate.p12

          echo "Setting key partition list to allow codesign access from non-interactive sessions..."
          # This is crucial for allowing codesign to access the imported key in CI
          # Use the CODESIGN_IDENTITY_STRING from the job environment
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "$KEYCHAIN_TEMP_PASSWORD" -t private "$KEYCHAIN_NAME"

          echo "Keychain setup complete. Available signing identities:"
          security find-identity -v -p codesigning "$KEYCHAIN_NAME"

      - name: Configure Notarytool
        env:
          NOTARY_APPLE_ID_SECRET: ${{ secrets.NOTARY_APPLE_ID }}
          NOTARY_TEAM_ID_SECRET: ${{ secrets.NOTARY_TEAM_ID }}
          NOTARY_APP_SPECIFIC_PASSWORD_SECRET: ${{ secrets.NOTARY_APP_SPECIFIC_PASSWORD }}
        run: |
          echo "Configuring Notarytool for profile: ${{ env.NOTARY_PROFILE_NAME }}"
          xcrun notarytool store-credentials "${{ env.NOTARY_PROFILE_NAME }}" --apple-id "$NOTARY_APPLE_ID_SECRET" --team-id "$NOTARY_TEAM_ID_SECRET" --password "$NOTARY_APP_SPECIFIC_PASSWORD_SECRET"
          echo "Notarytool configured."

      # - name: Install wheel building tools and build-time dependencies
      #   run: python -m pip install wheel twine requests -r requirements/_requirements.txt -r requirements/requirements.cpu.txt -r requirements/requirements.http.txt -r requirements/requirements.sdk.http.txt

      # - name: Build inference wheel
      #   run: |
      #     rm -f dist/*
      #     rm -rf build/*
      #     python .release/pypi/inference.setup.py bdist_wheel
      #     echo "--- Contents of dist/ after building inference wheel ---"
      #     ls -la dist/

      # - name: Install inference from local wheel
      #   run: |
      #     WHEEL_FILE=$(ls dist/inference-*.whl)
      #     echo "Found wheel: $WHEEL_FILE"
      #     pip install "$WHEEL_FILE[sam,transformers,clip,http,yolo-world,gaze,grounding-dino]"
      #     pip show inference


      - name: Build local inference wheels
        shell: bash # Ensures 'make' and 'rm -rf' work as expected
        run: make create_wheels
        # Add the ls/dir dist/* after this if you want to see the output
        # For bash:
        #   echo "--- Contents of dist/ after building all wheels ---"
        #   ls -la dist/

      - name: Install inference and dependencies from local wheels
        shell: bash # Using bash for wildcard expansion in pip install
        run: |
          WHEEL_FILE=$(ls dist/inference-*.whl)
          echo "Found GPU wheel: $WHEEL_FILE"
          pip install --find-links=./dist/ "$WHEEL_FILE[sam,transformers,clip,http,yolo-world,gaze,grounding-dino]"
          echo "--- Installed inference details ---"
          pip show inference


      - name: Install PyInstaller and other build dependencies
        working-directory: ./app_bundles/osx # Adjusted path
        run: |
          echo "DEBUG: Checking for OpenSSL libraries before pip install..."
          ls -l /opt/homebrew/opt/openssl@3/lib/libssl.3.dylib || echo "libssl.3.dylib from openssl@3 not found (as expected after removal)"
          ls -l /opt/homebrew/opt/openssl@3/lib/libcrypto.3.dylib || echo "libcrypto.3.dylib from openssl@3 not found (as expected after removal)"
          echo "DEBUG: Checking for default OpenSSL (typically openssl@1.1 or similar from 'brew install openssl')..."
          ls -l /opt/homebrew/opt/openssl/lib/libssl.dylib || echo "default libssl.dylib not found"
          ls -l /opt/homebrew/opt/openssl/lib/libcrypto.dylib || echo "default libcrypto.dylib not found"
          pip install -r requirements.txt # This now only installs pyinstaller
          echo "DEBUG: PyInstaller version:"
          pip show pyinstaller

      - name: Build macOS app and DMG
        working-directory: ./app_bundles/osx # Adjusted path
        # The build.py script will use the CODESIGN_IDENTITY_STRING and NOTARY_PROFILE_NAME
        # The keychain and notarytool are now set up for these values.
        run: python build.py

      - name: Upload macOS DMG
        uses: actions/upload-artifact@v4
        with:
          name: Roboflow-Inference-DMG
          path: app_bundles/osx/Roboflow-Inference.dmg # Adjusted path
          if-no-files-found: error # Fail the step if the DMG is not found

      - name: List dist output directory
        working-directory: ./app_bundles/osx/dist # Adjusted path
        run: ls -la

      - name: List osx directory
        working-directory: ./app_bundles/osx # Adjusted path
        run: ls -la

      - name: Cleanup Keychain
        if: always() # Always run this step to ensure cleanup
        run: |
          echo "Deleting temporary keychain: ${{ env.KEYCHAIN_NAME }}"
          security delete-keychain "${{ env.KEYCHAIN_NAME }}" || echo "Keychain ${{ env.KEYCHAIN_NAME }} not found or already deleted."
