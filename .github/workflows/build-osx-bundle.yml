name: Build macOS Bundle

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      manual_version:
        description: 'Version to build (e.g., 1.0.0 or v1.0.0). Required for manual runs if a specific version is needed.'
        required: false # Script will default if not provided for manual, but release uploads need a version.

jobs:
  build_osx:
    runs-on: macos-latest
    permissions:
      contents: write
    env:
      KEYCHAIN_NAME: "build-keychain.keychain"
      CODESIGN_IDENTITY_STRING: "Developer ID Application: Roboflow, LLC (7SBQ39NG7G)"
      NOTARY_PROFILE_NAME: "roboflow-notary"
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        # No 'path' means checkout to the root

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install Homebrew
        run: |
          /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
          # Add Homebrew to PATH for this step and subsequent ones in the job
          echo "/opt/homebrew/bin" >> $GITHUB_PATH
        shell: bash

      - name: Install Pyenv build dependencies (and OpenSSL for system if needed by Pyenv)
        run: |
          brew install openssl readline sqlite3 xz zlib tcl-tk
        shell: bash

      - name: Install pyenv and Python 3.12.3
        run: |
          brew install pyenv
          export PYENV_ROOT="$HOME/.pyenv"
          export PATH="$PYENV_ROOT/bin:$PATH"
          eval "$(pyenv init --path)"
          eval "$(pyenv init -)"
          pyenv install 3.12.3
          pyenv global 3.12.3
          # Add pyenv shims to GITHUB_PATH for subsequent steps
          echo "$(pyenv root)/shims" >> $GITHUB_PATH
          echo "Installed Python version:"
          python --version
          echo "Pip version:"
          pip --version
          echo "Path to Python:"
          which python
          echo "Path to Pip:"
          which pip
        shell: bash

      - name: Import Apple Certificate and Key
        env:
          APPLE_CERTIFICATE_P12_BASE64: ${{ secrets.APPLE_CERTIFICATE_P12_BASE64 }}
          APPLE_CERTIFICATE_PASSWORD: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}
          KEYCHAIN_TEMP_PASSWORD: "temp_keychain_password" # A temporary password for the keychain itself
        run: |
          echo "Creating temporary keychain: $KEYCHAIN_NAME"
          security create-keychain -p "$KEYCHAIN_TEMP_PASSWORD" "$KEYCHAIN_NAME"
          # Make the new keychain default, keeping login.keychain in search path
          security list-keychains -d user -s "$KEYCHAIN_NAME" login.keychain
          security default-keychain -s "$KEYCHAIN_NAME"
          security unlock-keychain -p "$KEYCHAIN_TEMP_PASSWORD" "$KEYCHAIN_NAME"
          security set-keychain-settings -t 3600 -u "$KEYCHAIN_NAME" # Keep unlocked for 1 hour

          echo "Decoding and importing certificate..."
          echo "$APPLE_CERTIFICATE_P12_BASE64" | base64 --decode > certificate.p12
          # Import certificate into the keychain, allowing codesign to use it without prompts
          security import certificate.p12 -k "$KEYCHAIN_NAME" -P "" -T /usr/bin/codesign -T /usr/bin/productsign -T /usr/bin/security
          rm -f certificate.p12

          echo "Setting key partition list to allow codesign access from non-interactive sessions..."
          # This is crucial for allowing codesign to access the imported key in CI
          # Use the CODESIGN_IDENTITY_STRING from the job environment
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "$KEYCHAIN_TEMP_PASSWORD" -t private "$KEYCHAIN_NAME"

          echo "Keychain setup complete. Available signing identities:"
          security find-identity -v -p codesigning "$KEYCHAIN_NAME"

      - name: Configure Notarytool
        env:
          NOTARY_APPLE_ID_SECRET: ${{ secrets.NOTARY_APPLE_ID }}
          NOTARY_TEAM_ID_SECRET: ${{ secrets.NOTARY_TEAM_ID }}
          NOTARY_APP_SPECIFIC_PASSWORD_SECRET: ${{ secrets.NOTARY_APP_SPECIFIC_PASSWORD }}
        run: |
          echo "Configuring Notarytool for profile: ${{ env.NOTARY_PROFILE_NAME }}"
          xcrun notarytool store-credentials "${{ env.NOTARY_PROFILE_NAME }}" --apple-id "$NOTARY_APPLE_ID_SECRET" --team-id "$NOTARY_TEAM_ID_SECRET" --password "$NOTARY_APP_SPECIFIC_PASSWORD_SECRET"
          echo "Notarytool configured."


      - name: Build local inference wheels
        shell: bash # Ensures 'make' and 'rm -rf' work as expected
        run: make create_wheels
        # Add the ls/dir dist/* after this if you want to see the output
        # For bash:
        #   echo "--- Contents of dist/ after building all wheels ---"
        #   ls -la dist/

      - name: Install inference and dependencies from local wheels
        shell: bash # Using bash for wildcard expansion in pip install
        run: |
          WHEEL_FILE=$(ls dist/inference-*.whl)
          echo "Found GPU wheel: $WHEEL_FILE"
          pip install --find-links=./dist/ "$WHEEL_FILE[sam,transformers,clip,http,yolo-world,gaze,grounding-dino]"
          echo "--- Installed inference details ---"
          pip show inference


      - name: Install PyInstaller and other build dependencies
        working-directory: ./app_bundles/osx # Adjusted path
        run: |
          echo "DEBUG: Checking for OpenSSL libraries before pip install..."
          ls -l /opt/homebrew/opt/openssl@3/lib/libssl.3.dylib || echo "libssl.3.dylib from openssl@3 not found (as expected after removal)"
          ls -l /opt/homebrew/opt/openssl@3/lib/libcrypto.3.dylib || echo "libcrypto.3.dylib from openssl@3 not found (as expected after removal)"
          echo "DEBUG: Checking for default OpenSSL (typically openssl@1.1 or similar from 'brew install openssl')..."
          ls -l /opt/homebrew/opt/openssl/lib/libssl.dylib || echo "default libssl.dylib not found"
          ls -l /opt/homebrew/opt/openssl/lib/libcrypto.dylib || echo "default libcrypto.dylib not found"
          pip install --upgrade pip
          pip install --upgrade pyinstaller pyinstaller-hooks-contrib
          pip install -r requirements.txt # This now only installs pyinstaller
          echo "DEBUG: PyInstaller version:"
          pip show pyinstaller
          echo "DEBUG: pyinstaller-hooks-contrib version:"
          pip show pyinstaller-hooks-contrib

      - name: Determine Version
        id: determine_version
        shell: bash
        run: |
          VERSION=""
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            if [ -n "${{ inputs.manual_version }}" ]; then
              VERSION="${{ inputs.manual_version }}"
              VERSION=${VERSION#v} # Remove leading 'v'
              echo "Manual run. Using provided version: $VERSION"
            else
              # Default for manual run if no version provided, build.py will also default
              VERSION="0.0.0-manual-dev"
              echo "Manual run. No version provided, will use default in build script: $VERSION"
            fi
          elif [[ "${{ github.ref }}" == refs/tags/v* ]]; then
            VERSION=$(echo "${{ github.ref }}" | sed 's!refs/tags/v!!')
            echo "Release run. Version from tag: $VERSION"
          elif [[ "${{ github.ref }}" == refs/tags/* ]]; then
            VERSION=$(echo "${{ github.ref }}" | sed 's!refs/tags/!!')
            echo "Release run. Version from tag: $VERSION"
          fi

          if [ -z "$VERSION" ] && [ "${{ github.event_name }}" == "release" ]; then
            echo "Error: Could not determine installer version for release."
            exit 1
          fi
          # For cases where manual_version is empty, ensure build.py uses its internal default
          # If version is set (from tag or manual input), pass it
          if [ -n "$VERSION" ]; then
             echo "BUILD_VERSION_ENV=$VERSION" >> $GITHUB_OUTPUT
          else
             # Let build.py handle the default, pass an empty string or don't set BUILD_VERSION_ENV
             # For consistency in later steps that might need a version (like release upload), this path should be handled.
             # If it's a release, it should have failed above. If manual and no input, it will be 0.0.0-manual-dev.
             echo "BUILD_VERSION_ENV=$VERSION" >> $GITHUB_OUTPUT # Will be 0.0.0-manual-dev here if manual and no input
          fi

      - name: Build macOS app and DMG
        working-directory: ./app_bundles/osx # Adjusted path
        env:
          BUILD_VERSION: ${{ steps.determine_version.outputs.BUILD_VERSION_ENV }} # Pass determined version
        run: python build.py

      - name: Upload macOS DMG Artifact
        uses: actions/upload-artifact@v4
        with:
          name: Roboflow-Inference-DMG-${{ steps.determine_version.outputs.BUILD_VERSION_ENV || 'dev' }} # Add version to artifact name
          path: app_bundles/osx/Roboflow-Inference-${{ steps.determine_version.outputs.BUILD_VERSION_ENV || 'unknown' }}.dmg
          if-no-files-found: error

      - name: Upload DMG to Release
        if: github.event_name == 'release' && steps.determine_version.outputs.BUILD_VERSION_ENV != '0.0.0-manual-dev' && steps.determine_version.outputs.BUILD_VERSION_ENV != ''
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./app_bundles/osx/Roboflow-Inference-${{ steps.determine_version.outputs.BUILD_VERSION_ENV }}.dmg
          asset_name: Roboflow-Inference-${{ steps.determine_version.outputs.BUILD_VERSION_ENV }}.dmg
          asset_content_type: application/x-apple-diskimage

      - name: List dist output directory
        working-directory: ./app_bundles/osx/dist # Adjusted path
        run: ls -la

      - name: List osx directory
        working-directory: ./app_bundles/osx # Adjusted path
        run: ls -la

      - name: Cleanup Keychain
        if: always() # Always run this step to ensure cleanup
        run: |
          echo "Deleting temporary keychain: ${{ env.KEYCHAIN_NAME }}"
          security delete-keychain "${{ env.KEYCHAIN_NAME }}" || echo "Keychain ${{ env.KEYCHAIN_NAME }} not found or already deleted."
